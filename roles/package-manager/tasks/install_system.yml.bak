---
# Install packages using system package manager (pacman/dnf)

- name: Extract package names for system installation
  set_fact:
    system_package_names: >-
      {{
        packages_to_install | map(attribute='name') | list
      }}
  when: packages_to_install | length > 0

- name: Install system packages (Arch Linux)
  block:
    - name: Install packages via pacman
      pacman:
        name: "{{ system_package_names }}"
        state: present
        update_cache: false
      become: true
      register: pacman_result
      ignore_errors: true

    - name: Install packages via AUR (for failed pacman packages)
      shell: |
        {{ arch_linux.aur_helper | default('paru') }} -S {{ item }} {{ arch_linux.makepkg_flags | default('--noconfirm --needed') }}
      loop: "{{ system_package_names }}"
      become: false
      become_user: "{{ arch_linux.aur_builder }}"
      register: aur_result
      ignore_errors: true
      when: 
        - pacman_result is failed
        - arch_linux.aur_helper is defined

  when: 
    - ansible_os_family == "Archlinux"
    - packages_to_install | length > 0
  tags: ["system", "archlinux"]

- name: Install system packages (Rocky Linux)
  block:
    - name: Separate package types
      set_fact:
        base_packages: >-
          {{
            system_package_names | intersect(system_packages.base | default([]))
          }}
        epel_packages: >-
          {{
            system_package_names | intersect(epel_packages | default([]))
          }}
        rpmfusion_free_packages: >-
          {{
            system_package_names | intersect(rpmfusion_free_packages | default([]))
          }}
        rpmfusion_nonfree_packages: >-
          {{
            system_package_names | intersect(rpmfusion_nonfree_packages | default([]))
          }}

    - name: Install base packages
      dnf:
        name: "{{ base_packages }}"
        state: present
      become: true
      register: base_result
      ignore_errors: true
      when: base_packages | length > 0

    - name: Install EPEL packages
      dnf:
        name: "{{ epel_packages }}"
        state: present
        enablerepo: epel
      become: true
      register: epel_result
      ignore_errors: true
      when: epel_packages | length > 0

    - name: Install RPM Fusion Free packages
      dnf:
        name: "{{ rpmfusion_free_packages }}"
        state: present
        enablerepo: rpmfusion-free
      become: true
      register: rpmfusion_free_result
      ignore_errors: true
      when: rpmfusion_free_packages | length > 0

    - name: Install RPM Fusion Non-Free packages
      dnf:
        name: "{{ rpmfusion_nonfree_packages }}"
        state: present
        enablerepo: rpmfusion-nonfree
      become: true
      register: rpmfusion_nonfree_result
      ignore_errors: true
      when: rpmfusion_nonfree_packages | length > 0

  when: 
    - ansible_os_family == "RedHat"
    - packages_to_install | length > 0
  tags: ["system", "redhat"]

# Process results and update tracking variables
- name: Process system installation results (Arch Linux)
  set_fact:
    package_manager_success: >-
      {{
        package_manager_success + 
        (packages_to_install | selectattr('name', 'in', pacman_result.packages | default([])) | list) +
        (packages_to_install | selectattr('name', 'in', aur_result.results | default([]) | selectattr('stdout', 'search', 'installing') | map(attribute='item') | list) | list)
      }}
    package_manager_failed: >-
      {{
        package_manager_failed +
        (packages_to_install | rejectattr('name', 'in', 
          (pacman_result.packages | default([])) +
          (aur_result.results | default([]) | selectattr('stdout', 'search', 'installing') | map(attribute='item') | list)
        ) | list)
      }}
  when: 
    - ansible_os_family == "Archlinux"
    - packages_to_install | length > 0

- name: Process system installation results (Rocky Linux)
  set_fact:
    package_manager_success: >-
      {{
        package_manager_success + 
        (packages_to_install | selectattr('name', 'in', 
          (base_result.results | default([]) | selectattr('changed', 'equalto', true) | map(attribute='name') | list) +
          (epel_result.results | default([]) | selectattr('changed', 'equalto', true) | map(attribute='name') | list) +
          (rpmfusion_free_result.results | default([]) | selectattr('changed', 'equalto', true) | map(attribute='name') | list) +
          (rpmfusion_nonfree_result.results | default([]) | selectattr('changed', 'equalto', true) | map(attribute='name') | list)
        ) | list)
      }}
    package_manager_failed: >-
      {{
        package_manager_failed +
        (packages_to_install | rejectattr('name', 'in', 
          (base_result.results | default([]) | selectattr('changed', 'equalto', true) | map(attribute='name') | list) +
          (epel_result.results | default([]) | selectattr('changed', 'equalto', true) | map(attribute='name') | list) +
          (rpmfusion_free_result.results | default([]) | selectattr('changed', 'equalto', true) | map(attribute='name') | list) +
          (rpmfusion_nonfree_result.results | default([]) | selectattr('changed', 'equalto', true) | map(attribute='name') | list)
        ) | list)
      }}
  when: 
    - ansible_os_family == "RedHat"
    - packages_to_install | length > 0

- name: Display system installation results
  debug:
    msg: |
      System package installation completed:
      - Attempted: {{ packages_to_install | length }}
      - Successful: {{ package_manager_success | length }}
      - Failed: {{ package_manager_failed | length }}
  when: 
    - package_manager.debug | default(false)
    - packages_to_install | length > 0