---
# Install packages using Cargo (Rust package manager)

- name: Check if Cargo is available
  command: which cargo
  register: cargo_check
  failed_when: false
  changed_when: false
  become: false

- name: Install Rust and Cargo if not available
  block:
    - name: Download Rust installer
      get_url:
        url: https://sh.rustup.rs
        dest: "{{ package_manager_temp_dir }}/rustup.sh"
        mode: '0755'
      become: false

    - name: Install Rust
      shell: "{{ package_manager_temp_dir }}/rustup.sh -y --default-toolchain stable"
      become: false
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.cargo/bin"

    - name: Update PATH for Cargo
      set_fact:
        cargo_path: "{{ ansible_env.HOME }}/.cargo/bin"
  when: cargo_check.rc != 0

- name: Install packages via Cargo
  block:
    - name: Extract cargo package information
      set_fact:
        cargo_packages_to_install: >-
          {{
            packages_to_install | map('combine', {'cargo_info': cargo_packages[item.name] | default({})}) | list
          }}

    - name: Install Cargo packages
      shell: |
        export PATH="{{ ansible_env.PATH }}:{{ cargo_path | default('') }}:{{ ansible_env.HOME }}/.cargo/bin"
        cargo install {{ item.cargo_info.crate | default(item.name) }} {% if item.cargo_info.version is defined and item.cargo_info.version != 'latest' %}--version {{ item.cargo_info.version }}{% endif %} {% if item.cargo_info.features | default([]) | length > 0 %}--features "{{ item.cargo_info.features | join(',') }}"{% endif %}
      loop: "{{ cargo_packages_to_install }}"
      register: cargo_install_result
      ignore_errors: true
      become: false
      timeout: "{{ installation_methods.cargo.timeout | default(600) }}"

    - name: Copy installed binaries to system PATH
      copy:
        src: "{{ ansible_env.HOME }}/.cargo/bin/{{ item.name }}"
        dest: "{{ installation_methods.cargo.install_path | default('/usr/local/bin') }}/{{ item.name }}"
        mode: '0755'
        remote_src: true
      loop: "{{ cargo_packages_to_install }}"
      become: true
      ignore_errors: true
      when: 
        - cargo_install_result is succeeded
        - installation_methods.cargo.install_path | default('/usr/local/bin') != ansible_env.HOME + '/.cargo/bin'

  when: 
    - packages_to_install | length > 0
    - cargo_check.rc == 0 or cargo_path is defined

- name: Process Cargo installation results
  set_fact:
    package_manager_success: >-
      {{
        package_manager_success + 
        (packages_to_install | selectattr('name', 'in', 
          cargo_install_result.results | default([]) | selectattr('rc', 'equalto', 0) | map(attribute='item') | map(attribute='name') | list
        ) | list)
      }}
    package_manager_failed: >-
      {{
        package_manager_failed +
        (packages_to_install | rejectattr('name', 'in', 
          cargo_install_result.results | default([]) | selectattr('rc', 'equalto', 0) | map(attribute='item') | map(attribute='name') | list
        ) | list)
      }}
  when: packages_to_install | length > 0

- name: Display Cargo installation results
  debug:
    msg: |
      Cargo package installation completed:
      - Attempted: {{ packages_to_install | length }}
      - Successful: {{ cargo_install_result.results | default([]) | selectattr('rc', 'equalto', 0) | list | length }}
      - Failed: {{ cargo_install_result.results | default([]) | rejectattr('rc', 'equalto', 0) | list | length }}
  when: 
    - package_manager.debug | default(false)
    - packages_to_install | length > 0