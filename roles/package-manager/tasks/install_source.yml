---
# Install packages via source compilation

- name: Install packages via source builds
  block:
    - name: Extract source package information
      set_fact:
        source_packages_to_install: >-
          {{
            packages_to_install | map('combine', {'source_info': source_packages[item.name] | default({})}) | list
          }}

    - name: Create build directory
      file:
        path: "{{ temp_directories.builds }}"
        state: directory
        mode: '0755'
      become: true

    - name: Install build dependencies (Arch Linux)
      pacman:
        name: "{{ item.source_info.build_deps.Archlinux | default([]) }}"
        state: present
      become: true
      loop: "{{ source_packages_to_install }}"
      when: 
        - ansible_os_family == "Archlinux"
        - item.source_info.build_deps is defined

    - name: Install build dependencies (Rocky Linux)
      dnf:
        name: "{{ item.source_info.build_deps.RedHat | default([]) }}"
        state: present
      become: true
      loop: "{{ source_packages_to_install }}"
      when: 
        - ansible_os_family == "RedHat"
        - item.source_info.build_deps is defined

    - name: Clone source repositories
      git:
        repo: "{{ item.source_info.repository | default(item.source | default('')) }}"
        dest: "{{ temp_directories.builds }}/{{ item.name }}"
        force: true
        depth: 1
      loop: "{{ source_packages_to_install }}"
      register: source_clone_result
      ignore_errors: true
      when: item.source_info.repository | default(item.source) | default('') != ''

    - name: Build packages with CMake
      shell: |
        cd "{{ temp_directories.builds }}/{{ item.item.name }}"
        {% for cmd in item.item.source_info.build_commands | default([
          'mkdir -p build',
          'cd build',
          'cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=' + (installation_methods.source.install_prefix | default('/usr/local')) + ' ..',
          'make -j' + (ansible_processor_vcpus | default(2) | string),
          'make install'
        ]) %}
        {{ cmd }}
        {% endfor %}
      loop: "{{ source_clone_result.results | default([]) }}"
      register: cmake_build_result
      ignore_errors: true
      become: true
      timeout: "{{ installation_methods.source.timeout | default(1200) }}"
      when: 
        - item is succeeded
        - item.item.source_info.build_system | default('cmake') == 'cmake'

    - name: Build packages with Meson
      shell: |
        cd "{{ temp_directories.builds }}/{{ item.item.name }}"
        {% for cmd in item.item.source_info.build_commands | default([
          'meson setup build --prefix=' + (installation_methods.source.install_prefix | default('/usr/local')),
          'ninja -C build',
          'ninja -C build install'
        ]) %}
        {{ cmd }}
        {% endfor %}
      loop: "{{ source_clone_result.results | default([]) }}"
      register: meson_build_result
      ignore_errors: true
      become: true
      timeout: "{{ installation_methods.source.timeout | default(1200) }}"
      when: 
        - item is succeeded
        - item.item.source_info.build_system | default('cmake') == 'meson'

    - name: Build packages with Make
      shell: |
        cd "{{ temp_directories.builds }}/{{ item.item.name }}"
        {% for cmd in item.item.source_info.build_commands | default([
          'make -j' + (ansible_processor_vcpus | default(2) | string),
          'make install PREFIX=' + (installation_methods.source.install_prefix | default('/usr/local'))
        ]) %}
        {{ cmd }}
        {% endfor %}
      loop: "{{ source_clone_result.results | default([]) }}"
      register: make_build_result
      ignore_errors: true
      become: true
      timeout: "{{ installation_methods.source.timeout | default(1200) }}"
      when: 
        - item is succeeded
        - item.item.source_info.build_system | default('cmake') == 'make'

  when: packages_to_install | length > 0

- name: Verify source build installations
  shell: |
    ldconfig
    pkg-config --exists {{ item.name }} || which {{ item.name }} || find {{ installation_methods.source.install_prefix | default('/usr/local') }} -name "*{{ item.name }}*" -type f
  loop: "{{ packages_to_install }}"
  register: source_verify_result
  failed_when: false
  changed_when: false
  become: true

- name: Process source installation results
  set_fact:
    package_manager_success: >-
      {{
        package_manager_success + 
        (packages_to_install | selectattr('name', 'in', 
          source_verify_result.results | default([]) | selectattr('rc', 'equalto', 0) | map(attribute='item') | map(attribute='name') | list
        ) | list)
      }}
    package_manager_failed: >-
      {{
        package_manager_failed +
        (packages_to_install | rejectattr('name', 'in', 
          source_verify_result.results | default([]) | selectattr('rc', 'equalto', 0) | map(attribute='item') | map(attribute='name') | list
        ) | list)
      }}
  when: packages_to_install | length > 0

- name: Display source installation results
  debug:
    msg: |
      Source package installation completed:
      - Attempted: {{ packages_to_install | length }}
      - Successful: {{ source_verify_result.results | default([]) | selectattr('rc', 'equalto', 0) | list | length }}
      - Failed: {{ source_verify_result.results | default([]) | rejectattr('rc', 'equalto', 0) | list | length }}
  when: 
    - package_manager.debug | default(false)
    - packages_to_install | length > 0