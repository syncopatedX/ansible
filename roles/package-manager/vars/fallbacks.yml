---
# Fallback package definitions for alternative installation methods
# These are used when packages are not available via system package managers

# Cargo/Rust package definitions
cargo_packages:
  bandwhich:
    crate: bandwhich
    version: latest
    features: []
    alternative_commands: [iftop, nethogs]
    description: "Terminal bandwidth utilization tool"
    
  bottom:
    crate: bottom
    version: latest
    features: []
    alternative_commands: [htop, top]
    description: "Yet another cross-platform graphical process/system monitor"
    
  choose:
    crate: choose
    version: latest
    features: []
    alternative_commands: [cut, awk]
    description: "A human-friendly and fast alternative to cut and (sometimes) awk"
    
  dust:
    crate: du-dust
    version: latest
    features: []
    alternative_commands: [ncdu, du]
    description: "A more intuitive version of du in rust"
    
  eza:
    crate: eza
    version: latest
    features: []
    alternative_commands: [ls, exa]
    description: "A modern, maintained replacement for ls"
    
  fd-find:
    crate: fd-find
    version: latest
    features: []
    alternative_commands: [find]
    description: "A simple, fast and user-friendly alternative to 'find'"
    
  git-delta:
    crate: git-delta
    version: latest
    features: []
    alternative_commands: [diff]
    description: "A syntax-highlighting pager for git, diff, and grep output"
    
  gping:
    crate: gping
    version: latest
    features: []
    alternative_commands: [ping]
    description: "Ping, but with a graph"
    
  ripgrep:
    crate: ripgrep
    version: latest
    features: []
    alternative_commands: [grep, ag]
    description: "ripgrep recursively searches directories for a regex pattern"
    
  ripgrep_all:
    crate: ripgrep_all
    version: latest
    features: []
    alternative_commands: [grep, rg]
    description: "rga: ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc."
    
  sd:
    crate: sd
    version: latest
    features: []
    alternative_commands: [sed]
    description: "Intuitive find & replace CLI (sed alternative)"

# Binary download definitions
binary_packages:
  glow:
    url_template: "https://github.com/charmbracelet/glow/releases/latest/download/glow_Linux_x86_64.tar.gz"
    binary_name: glow
    extract: true
    strip_components: 0
    alternative_commands: [less, more]
    description: "Render markdown on the CLI, with pizzazz!"
    
  gum:
    url_template: "https://github.com/charmbracelet/gum/releases/latest/download/gum_Linux_x86_64.tar.gz"
    binary_name: gum
    extract: true
    strip_components: 0
    alternative_commands: [dialog, whiptail]
    description: "A tool for glamorous shell scripts"
    
  micro:
    url_template: "https://github.com/zyedidia/micro/releases/latest/download/micro-linux64.tar.gz"
    binary_name: micro
    extract: true
    strip_components: 1
    alternative_commands: [nano, vim]
    description: "A modern and intuitive terminal-based text editor"
    
  gh:
    url_template: "https://github.com/cli/cli/releases/latest/download/gh_linux_amd64.tar.gz"
    binary_name: gh
    extract: true
    strip_components: 2
    alternative_commands: [git]
    description: "GitHub CLI tool"

# Source build definitions
source_packages:
  chromaprint:
    repository: "https://github.com/acoustid/chromaprint.git"
    build_system: cmake
    build_deps:
      Archlinux: [cmake, gcc, ffmpeg]
      RedHat: [cmake, gcc-c++, ffmpeg-devel]
    build_commands:
      - mkdir -p build
      - cd build
      - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ..
      - make -j{{ ansible_processor_vcpus | default(2) }}
      - make install
    alternative_commands: []
    description: "Audio fingerprinting library"
    
  libvips:
    repository: "https://github.com/libvips/libvips.git"
    build_system: meson
    build_deps:
      Archlinux: [meson, ninja, glib2, expat, libjpeg-turbo, libpng, libtiff, libwebp]
      RedHat: [meson, ninja-build, glib2-devel, expat-devel, libjpeg-turbo-devel, libpng-devel, libtiff-devel, libwebp-devel]
    build_commands:
      - meson setup build --prefix=/usr/local
      - ninja -C build
      - ninja -C build install
    alternative_commands: [convert, imagemagick]
    description: "Image processing library"

# Python pip package definitions
pip_packages:
  edge-tts:
    package: edge-tts
    version: latest
    user_install: false
    alternative_commands: [espeak, festival]
    description: "Use Microsoft Edge's online text-to-speech service"
    
  j2cli:
    package: j2cli
    version: latest
    user_install: false
    alternative_commands: [jinja2]
    description: "Jinja2 command-line tool"
    
  tldr:
    package: tldr
    version: latest
    user_install: false
    alternative_commands: [man]
    description: "Python command line client for tldr pages"
    
  ueberzug:
    package: ueberzug
    version: latest
    user_install: false
    alternative_commands: [w3m-img]
    description: "Command line util which allows to display images in combination with X11"

# Flatpak package definitions
flatpak_packages:
  # Add Flatpak packages if needed
  # Example:
  # gimp:
  #   id: org.gimp.GIMP
  #   remote: flathub
  #   alternative_commands: [convert, krita]
  #   description: "GNU Image Manipulation Program"

# Repository setup commands for special packages
repository_setups:
  github_cli:
    RedHat: |
      curl -fsSL https://cli.github.com/packages/rpm/gh-cli.repo | sudo tee /etc/yum.repos.d/github-cli.repo
    Archlinux: |
      # GitHub CLI is available in the official repositories
      echo "GitHub CLI available in official repositories"
    packages: [gh]
    
  docker:
    RedHat: |
      dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    Archlinux: |
      # Docker is available in the official repositories
      echo "Docker available in official repositories"
    packages: [docker-ce, docker-ce-cli, containerd.io]

# Installation method priorities by package
package_priorities:
  # System packages always tried first if available
  git:
    - system
  
  # Packages with specific preferred methods
  ripgrep:
    - system
    - cargo
    
  bottom:
    - cargo
    - binary
    
  glow:
    - system
    - binary
    
  # Source-only packages
  chromaprint:
    - system
    - source
    
  libvips:
    - system
    - source

# Default fallback strategies by distribution
default_fallback_strategies:
  Archlinux:
    - system
    - aur
    - cargo
    - binary
    - pip
    
  RedHat:
    - system
    - epel
    - cargo
    - binary
    - source
    - pip
    
  default:
    - system
    - cargo
    - binary
    - pip