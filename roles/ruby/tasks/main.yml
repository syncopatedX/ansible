---
# tasks file for ruby

- name: Load a variable file based on the OS type, or a default if not found.
  include_vars: "{{ lookup('ansible.builtin.first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_os_family }}.yml"
      paths:
        - "vars"
  tags: ["packages"]

- name: Load the main vars
  include_vars: main.yml
  vars:
    params:
      paths:
        - "vars"

- setup:
- debug:
    msg: "{{ packages }}"
  when: debug_vars is defined

- name: Install Ruby dev packages
  pacman:
    name: "{{ packages }}"
    state: present
  become: true
  tags: ["packages"]

# by default /etc/gemrc is set to --user-install
# set --no-user-install in /root/.gemrc
# to install gems system wide using sudo
- become: true
# become_flags: '-s /usr/bin/sh'
# environment:
#   PATH: "/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl"

# - name: Install ruby profile.d script
#   template:
#     src: etc/profile.d/ruby.sh.j2
#     dest: /etc/profile.d/ruby.sh
#     owner: root
#     group: root
#     mode: '0755'
#     backup: True

# - block:
#     - name: Update system bundler
#       shell: gem update --system

#     - name: Gather list of installed gems
#       shell: "gem list | awk '{ print $1 }'"
#       register: gemlist
#       changed_when: gemlist.rc != 0
#       ignore_errors: "{{ ansible_check_mode }}"

#     - name: Set list of gems to install
#       set_fact:
#         ruby__gems: "{{ gems|difference(gemlist.stdout) }}"

#     - name: Display ruby__gems vars
#       debug:
#         msg: "{{ ruby__gems }}"
#       when: debug_vars is defined

#     - name: Install system Ruby gems
#       shell: "gem install {{ item }}"
#       with_items:
#         - "{{ ruby__gems }}"
#       when: ruby__gems | length > 0

#   become: true
#   tags: ["ruby__gems"]

  block:
    # - debug:
    #     msg: "{{ ansible_env | to_nice_json }}"
    #   become: true
    #   become_flags: '-s /usr/bin/sh'

    - name: Create gemrc files
      shell: |
        touch /root/.gemrc && \
        touch {{ user.home }}/.gemrc && \
        touch /etc/gemrc

    - name: Set --no-user-install in /root/.gemrc
      copy:
        content: |
          gem: --no-user-install --no-document
        dest: "/root/.gemrc"
        owner: root
        mode: '0644'

    - name: Set --user-install in /home/user/.gemrc
      copy:
        content: |
          gem: --user-install
        dest: "{{ user.home }}/.gemrc"
        owner: "{{ user.name }}"
        mode: '0644'

    - name: Set --no-user-install in /etc/gemrc
      copy:
        content: |
          gem: --user-install
        dest: "/etc/gemrc"
        owner: root
        mode: '0644'

    - name: Gather list of installed system gems
      ansible.builtin.command: "/usr/bin/gem list --no-versions" # Get just the names
      register: installed_system_gems_raw
      changed_when: false
      check_mode: false # Always run check to get current state

    # Process the output to get a clean list of gem names
    - name: Set fact for installed system gem names
      ansible.builtin.set_fact:
        installed_system_gem_names: "{{ installed_system_gems_raw.stdout_lines | map('regex_replace', '^([^ ]+).*', '\\1') | list }}"

    - name: Set list of gems to install
      set_fact:
        _gems: "{{ gems | difference(gemlist.stdout) }}"




- name: Install system Ruby gems
  ansible.builtin.gem:
    name: "{{ item }}"
    state: present
    executable: /usr/bin/gem
    user_install: false # Explicitly ensure system install
  loop: "{{ gems }}" # Loop through desired gems
  # Check if gem name is NOT in the list of installed gems
  when: item not in (installed_system_gems.gems | default({}) | list)


- when: rvm_install|default(false)|bool == True
  become: false
  tags: ["rvm"]
  block:
    - name: Install RVM
      import_tasks: "rvm.yml"

    - name: Install Ruby and Gems
      import_tasks: "rubies.yml"
