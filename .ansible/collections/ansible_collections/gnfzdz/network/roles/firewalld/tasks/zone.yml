---

# Note: The cli api is slightly different depending on whether firewalld is running or not.
# Further, even attempting to always start firewalld may fail. This consistently occurs if the nftables kernel
# module is not already loaded and the the kernel has been updated since the last restart.
- name: Identify correct command to managed firewalld
  block:
  # TODO consider switching to use ansible.builtin.service_facts
  - name: Test if firewalld is running
    ansible.builtin.command: "firewall-cmd --list-all"
    changed_when: False
    ignore_errors: True
    register: firewalld_status
  - name: Set firewall_cmd fact
    ansible.builtin.set_fact:
      firewall_command: "{{ 'firewall-cmd' if firewalld_status.rc == 0 else 'firewall-offline-cmd' }}"
      firewall_permanent: "{{ '--permanent' if firewalld_status.rc == 0 else '' }}"

- name: 'Check that the targeted zone is valid and is not a default zone'
  ansible.builtin.assert:
    that:
      - zone.name is defined
      - (zone.name) is not in network_firewalld_default_zones
      - (zone.name) is regex(network_firewalld_allowed_zone_pattern)

- name: 'Create zone {{ zone.name }}'
  block:
  - name: 'Check for existing zone {{ zone.name }}'
    ansible.builtin.command:
      cmd: "{{ firewall_command }} --info-zone='{{ zone.name }}' {{ firewall_permanent }}"
    ignore_errors: Yes
    changed_when: No
    register: register_check_zone_exists

  - name: 'Create missing zone {{ zone.name }}'
    ansible.builtin.command: "{{ firewall_command }} --new-zone='{{ zone.name }}' {{ firewall_permanent }}"
    when: (register_check_zone_exists.rc != 0)
    changed_when: Yes
    notify:
    - Update firewalld

- name: 'Set default target for zone {{ zone.name }}'
  ansible.posix.firewalld:
    zone: "{{ zone.name }}"
    state: "enabled"
    target: "{{ zone.target }}"
    permanent: Yes
  when: zone.target is defined
  notify:
  - Update firewalld

- name: 'Enable masquerading for zone {{ zone.name }}'
  ansible.posix.firewalld:
    zone: "{{ zone.name }}"
    state: "enabled"
    masquerade: "{{ zone.masquerade }}"
    permanent: Yes
  when: zone.masquerade is defined
  notify:
  - Update firewalld

- name: 'Enable default services for zone {{ zone.name }}'
  ansible.posix.firewalld:
    zone: "{{ zone.name }}"
    state: "enabled"
    service: "{{ item }}"
    permanent: Yes
  loop: "{{ zone.services | default(network_firewalld_zones_default_services) }}"
  notify:
  - Update firewalld

- name: 'Configure forwarding for zone {{ zone.name }}'
  when: zone.forward is defined
  block:
  - name: 'Check forwarding for zone {{ zone.name }}'
    ansible.builtin.command:
      cmd: "{{ firewall_command }} --zone='{{ zone.name }}' --query-forward {{ firewall_permanent }}"
    ignore_errors: Yes
    changed_when: No
    register: register_check_forward

  - name: 'Update forwarding for zone {{ zone.name }}'
    ansible.builtin.command: "{{ firewall_command }} --zone='{{ zone.name }}' {{ '--add-forward' if (zone.forward | bool) else '--remove-forward' }} {{ firewall_permanent }}"
    when: (not (zone.forward | bool) and register_check_forward.rc == 0) or ((zone.forward | bool) and register_check_forward.rc != 0)
    changed_when: Yes
    notify:
    - Update firewalld

- name: 'Configure short description for zone {{ zone.name }}'
  block:
  - name: 'Check short description for zone {{ zone.name }}'
    ansible.builtin.command:
      cmd: "{{ firewall_command }} --zone='{{ zone.name }}' --get-short {{ firewall_permanent }}"
    ignore_errors: Yes
    changed_when: No
    register: register_current_short_description

  - name: 'Update short description for zone {{ zone.name }}'
    ansible.builtin.command: "{{ firewall_command }} --zone='{{ zone.name }}' --set-short='{{ zone.name | title | replace('_', ' ') }}' {{ firewall_permanent }}"
    when: register_current_short_description.stdout == ""
    changed_when: Yes
    notify:
    - Update firewalld

- name: 'Configure description for zone {{ zone.name }}'
  when: zone.description is defined
  block:
  - name: 'Check description for zone {{ zone.name }}'
    ansible.builtin.command:
      cmd: "{{ firewall_command }} --zone='{{ zone.name }}' --get-description {{ firewall_permanent }}"
    ignore_errors: Yes
    changed_when: No
    register: register_check_description

  - name: 'Update description for zone {{ zone.name }}'
    ansible.builtin.command: "{{ firewall_command }} --zone='{{ zone.name }}' --set-description='{{ zone.description }}' {{ firewall_permanent }}"
    when: register_check_description.stdout != zone.description
    changed_when: Yes
    notify:
    - Update firewalld
