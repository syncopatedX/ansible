---

- name: Request username
  block:
  - name: Enter username
    ansible.builtin.pause:
      prompt: "Please enter your admin's username"
      echo: True
    register: username_result
    run_once: True
  - name: Validate username
    ansible.builtin.assert:
      that:
        - username_result.user_input is match(archlinux_install_prompt_username_valid_format)

- name: Request password
  block:
  - name: Enter password
    ansible.builtin.pause:
      prompt: "Please enter {{ username_result.user_input }}'s desired password"
      echo: False
    register: password_1_result
    run_once: True

  - name: Ask for duplicate entry of password
    ansible.builtin.pause:
      prompt: "Please repeat {{ username_result.user_input }}'s desired password"
      echo: False
    register: password_2_result
    run_once: True

  - name: Validate passwords match
    ansible.builtin.assert:
      that:
        - password_1_result.user_input == password_2_result.user_input

- name: Request authorized keys
  block:
  - name: Ask about prepopulating authorized key
    ansible.builtin.pause:
      prompt: "Enter a github username if you'd like to initialize {{ username_result.user_input }}'s authorized ssh keys from this account"
    register: github_username_result
    run_once: True
  - name: Ask about prepopulating authorized key
    ansible.builtin.uri:
      url: "https://api.github.com/users/{{ github_username_result.user_input }}/keys"
      follow_redirects: none
      method: GET
    register: github_user_ssh_keys_result
    run_once: True
    # TODO also trim
    when: github_username_result.user_input | length > 0

- name: Configure user selection for inventory vars
  ansible.builtin.set_fact:
    archlinux_install_configure_inventory_vars: "{{
      [
        ( archlinux_install_configure_inventory_vars | default({}) ),
        {
          ('user_' ~ username_result.user_input): {
            'password': ( password_1_result.user_input | password_hash('sha512', rounds=65536) ),
            'authorized_key': ( (github_user_ssh_keys_result.json | map(attribute='key')) if (github_user_ssh_keys_result is defined) else [] )
          },
          'users_auto': [ username_result.user_input ],
          'groups_admin_users': [ username_result.user_input ]
        }
      ] | combine(recursive=True,list_merge='append')
    }}"
