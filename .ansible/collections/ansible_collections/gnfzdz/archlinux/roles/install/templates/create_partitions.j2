#!/usr/bin/env bash
# Currently for reference only
# Considering switching back to a bash based approach in the future, with appropriate variables set by ansible (jinja templating)

# Defaults
readonly LUKS_NAME="encrypted"
readonly LUKS_LV_PATH="/dev/mapper/${LUKS_NAME}"

readonly VG_NAME="Container"

readonly LV_ROOT_NAME="root"
readonly LV_ROOT_PATH="/dev/mapper/${VG_NAME}-${LV_ROOT_NAME}"

readonly ANSIBLE_FACTS_ROOTFS="boot.fact"
readonly ANSIBLE_FACTS_D="/mnt/etc/ansible/facts.d/"

readonly ANSIBLE_COLLECTION_INSTALL_PATH="/root/.ansible/collections/ansible_collections/gnfzdz/archlinux"
readonly ANSIBLE_COLLECTION_REPOSITORY_URL="http://localhost:8000/"
readonly ANSIBLE_EXECUTE_SCRIPT_PATH="/root/run_playbook.sh"

# Configuration options

# root is created inside a luks logical volume
readonly LUKS_ENABLED="true"
# seed the luks device with random data before creating
readonly LUKS_WIPE="false"
# root is created on an lvm logical volume
readonly LVM_ENABLED="true"
# optionally specify root volume size (default 100%)
readonly LV_ROOT_SIZE="100%FREE"

# Global variables
readonly boot_disk="${1}"
efi_part=""
data_part=""

function die() {
    echo "${1}" 1>&2
    exit 1
}

function validate_block_device() {
    local device="${1}"
    if ! [[ -b "${device}" ]]; then
        die "Failed to find expected block device ${device}"
    fi
}

function main() {
    local root_device=""

    validate_block_device "${boot_disk}"

    partition_disk::config "${boot_disk}"
    partition_disk::execute "${boot_disk}"
    partition_disk::check
    root_device="${data_part}"

    if [[ "${LUKS_ENABLED}" == "true" ]]; then
        setup_luks::execute "${root_device}"
        setup_luks::check

        root_device="${LUKS_LV_PATH}"
        local luks_device_uuid="$(blkid -o export "${data_part}" | egrep "^UUID=" | cut -d= -f2)"
        ansible::add_fact "encryption.enabled" "true"
        ansible::add_fact "encryption.dm_name" "${LUKS_NAME}"
        ansible::add_fact "encryption.device" "UUID=${luks_device_uuid}"
    else
        ansible::add_fact "encryption.enabled" "false"
    fi

    if [[ "${LVM_ENABLED}" == "true" ]]; then
        setup_lvm::execute "${root_device}"
        setup_lvm::check

        root_device="${LV_ROOT_PATH}"
        ansible::add_fact "lvm.enabled" "true"
    else
        ansible::add_fact "lvm.enabled" "false"
    fi

    setup_root::format "${root_device}"
    setup_root::mount  "${root_device}"

    ansible::add_fact "root.device" "${root_device}"
    ansible::add_fact "root.filesystem_type" "btrfs"

    efi_partition::format "${efi_part}"
    efi_partition::mount "${efi_part}"
    ansible::add_fact "boot.mode" "uefi"
    ansible::add_fact "efi.mount_path" "/efi"

    genfstab -U /mnt >> /mnt/etc/fstab
    pacstrap /mnt base base-devel git python python-poetry
    ansible::commit_facts
    ansible::execute
}

function partition_disk::config() {
    local target_disk="${1}" part_prefix="${1}"
    if [[ "${target_disk}" =~ [0-9]$ ]]; then
        # Any disk ending in a number has an additional p separator
        part_prefix="${target_disk}p"
    fi

    efi_part="${part_prefix}1"
    data_part="${part_prefix}2"
}

function partition_disk::execute() {
    local target_disk="${1}"
    parted -s "${target_disk}" mklabel gpt
    parted -s "${target_disk}" mkpart fat32 1MiB 512MiB
    parted -s "${target_disk}" set 1 esp on
    # parted doesn't support a more accurate partition type than ext4
    # but the type information here isn't actually used
    # and most tools will just report it as a Linux partition
    parted -s "${target_disk}" mkpart ext4 512MiB 100%
}

function partition_disk::check() {
    validate_block_device "${efi_part}"
    validate_block_device "${data_part}"
}

function setup_luks::execute() {
    local partition="${1}"

    # Prepare the device by initializing it with random data
    if [[ "${LUKS_WIPE}" == "true" ]]; then
        cryptsetup open --type plain -d /dev/urandom "${partition}" to_be_wiped
        dd if=/dev/zero of=/dev/mapper/to_be_wiped status=progress
        cryptsetup close to_be_wiped
    fi

    echo "You will be prompted for the luks password"
    cryptsetup luksFormat --type luks1 "${partition}"
    cryptsetup open "${partition}" "${LUKS_NAME}"
}

function setup_luks::check() {
    validate_block_device "${LUKS_LV_PATH}"
}

function setup_lvm::execute() {
    local target="${1}" root_size="${LV_ROOT_SIZE}"
    if [[ -z "${root_size}" ]]; then
        root_size="100%FREE"
    fi

    # Create physical volume and volume group
    pvcreate "${target}"
    vgcreate "${VG_NAME}" "${target}"

    # Create logical volume for root fs
    lvcreate -l "${root_size}" "${VG_NAME}" -n "${LV_ROOT_NAME}"
}

function setup_lvm::check() {
    validate_block_device "${LV_ROOT_PATH}"
}

function setup_root::format() {
    local target="${1}"
    mkfs.btrfs -f -L root "${target}"

    mount "${target}" /mnt

    btrfs subvolume create /mnt/@
    btrfs subvolume create /mnt/@snapshots
    btrfs subvolume create /mnt/@home
    btrfs subvolume create /mnt/@home_snapshots
    btrfs subvolume create /mnt/@var_log
    btrfs subvolume create /mnt/@var_tmp
    btrfs subvolume create /mnt/@var_cache_pacman_pkg

    umount /mnt
}

function setup_root::mount() {
    local target="${1}"

    mount -o noatime,compress=zstd,subvol=@ "${target}" /mnt
    mkdir -p /mnt/.snapshots
    mount -o noatime,compress=zstd,subvol=@snapshots "${target}" /mnt/.snapshots
    mkdir -p /mnt/home
    mount -o noatime,compress=zstd,subvol=@home "${target}" /mnt/home
    mkdir -p /mnt/home/.snapshots
    mount -o noatime,compress=zstd,subvol=@home_snapshots "${target}" /mnt/home/.snapshots

    mkdir -p /mnt/var/{log,tmp}
    mount -o noatime,compress=zstd,subvol=@var_log "${target}" /mnt/var/log
    mount -o noatime,compress=zstd,subvol=@var_tmp "${target}" /mnt/var/tmp
    mkdir -p /mnt/var/cache/pacman/pkg
    mount -o noatime,compress=zstd,subvol=@var_cache_pacman_pkg "${target}" /mnt/var/cache/pacman/pkg
}

function efi_partition::format() {
    local partition="${1}"
    mkfs.vfat -F 32 "${partition}"
}

function efi_partition::mount() {
    local partition="${1}"
    mkdir /mnt/efi
    mount "${partition}" /mnt/efi
}

function ansible::add_fact() {
    echo "${1}=${2}" >> "./${ANSIBLE_FACTS_ROOTFS}"
}

function ansible::commit_facts() {
    local last_section="" line section key value
    mkdir -p "${ANSIBLE_FACTS_D}"
    rm -f "${ANSIBLE_FACTS_D}/${ANSIBLE_FACTS_ROOTFS}"

    while read line; do
        if [[ $line =~ ^.*\..*=.*$ ]]; then
            value="$(echo $line | cut -d= -f2-)"
            section="$(echo $line | cut -d= -f1 | cut -d. -f1)"
            key="$(echo $line | cut -d= -f1 | cut -d. -f2)"

            if [[ "${last_section}" != "${section}" ]]; then
                echo "[${section}]" >> "${ANSIBLE_FACTS_D}/${ANSIBLE_FACTS_ROOTFS}"
                last_section="${section}"
            fi
            echo "${key}=${value}" >> "${ANSIBLE_FACTS_D}/${ANSIBLE_FACTS_ROOTFS}"
        fi
    done < <(sort "./${ANSIBLE_FACTS_ROOTFS}") # sort to ensure like sections are grouped together
    rm "./${ANSIBLE_FACTS_ROOTFS}"
}

function ansible::execute() {

# TODO optionally check for inventory

cat > "/mnt/${ANSIBLE_EXECUTE_SCRIPT_PATH}" <<EOF
#!/usr/bin/env bash

mkdir -p "${ANSIBLE_COLLECTION_INSTALL_PATH}"
git clone --recurse-submodules "${ANSIBLE_COLLECTION_REPOSITORY_URL}" "${ANSIBLE_COLLECTION_INSTALL_PATH}"

cd "${ANSIBLE_COLLECTION_INSTALL_PATH}"
poetry install
poetry run ansible-playbook playbook.yml
EOF

chmod u+x "/mnt${ANSIBLE_EXECUTE_SCRIPT_PATH}"
arch-chroot /mnt "${ANSIBLE_EXECUTE_SCRIPT_PATH}"

}

main
