---

- name: Prepare new luks device {{ archlinux_install_cryptroot_name }}
  community.crypto.luks_device:
    device: "{{ archlinux_install_part_root_path }}"
    type: "luks1"
    state: "closed" # will also ensure it exists
    passphrase: "{{ archlinux_install_encrypt_passphrase }}"

- name: Prepare keyfile for automatic unlocking
  block:
  - name: Generate keyfile for {{ archlinux_install_cryptroot_name }}
    ansible.builtin.command:
      cmd: "dd bs=512 count=4 if=/dev/random of={{ archlinux_install_encrypt_keyfile_temppath }} iflag=fullblock"
      creates: "{{ archlinux_install_encrypt_keyfile_temppath }}"

  - name: Add keyfile to {{ archlinux_install_cryptroot_name }}
    community.crypto.luks_device:
      device: "{{ archlinux_install_part_root_path }}"
      passphrase: "{{ archlinux_install_encrypt_passphrase }}"
      new_keyfile: "{{ archlinux_install_encrypt_keyfile_temppath }}"
  when: archlinux_install_encrypt_autounlock

- name: Open luks device {{ archlinux_install_cryptroot_name }}
  community.crypto.luks_device:
    device: "{{ archlinux_install_part_root_path }}"
    type: "luks1"
    state: "opened"
    name: "{{ archlinux_install_cryptroot_name }}"
    passphrase: "{{ archlinux_install_encrypt_passphrase }}"

- name: Save uuid of device containing {{ archlinux_install_cryptroot_name }} luks container
  block:
    - name: "Query device uuid"
      ansible.builtin.shell: "blkid -o export '{{ archlinux_install_part_root_path }}' | egrep '^UUID=' | cut -d= -f2"
      register: register_encrypt_device_uuid
      changed_when: False

    - name: "Set device uuid as fact"
      ansible.builtin.set_fact:
        archlinux_install_encrypt_deviceuuid: "{{ register_encrypt_device_uuid.stdout }}"
